package tsw.accountnumber.db.greendaogen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import tsw.accountnumber.db.greendaobean.Account_Password;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "account_password".
*/
public class Account_PasswordDao extends AbstractDao<Account_Password, Long> {

    public static final String TABLENAME = "account_password";

    /**
     * Properties of entity Account_Password.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Account = new Property(1, String.class, "account", false, "account");
        public final static Property Password = new Property(2, String.class, "password", false, "password");
        public final static Property Repository_password = new Property(3, String.class, "repository_password", false, "repository_password");
        public final static Property Associated_mailbox = new Property(4, String.class, "associated_mailbox", false, "associated_mailbox");
        public final static Property Account_type_id = new Property(5, int.class, "account_type_id", false, "account_type_id");
        public final static Property Application_name = new Property(6, String.class, "application_name", false, "application_name");
    }


    public Account_PasswordDao(DaoConfig config) {
        super(config);
    }
    
    public Account_PasswordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"account_password\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"account\" TEXT," + // 1: account
                "\"password\" TEXT," + // 2: password
                "\"repository_password\" TEXT," + // 3: repository_password
                "\"associated_mailbox\" TEXT," + // 4: associated_mailbox
                "\"account_type_id\" INTEGER NOT NULL ," + // 5: account_type_id
                "\"application_name\" TEXT);"); // 6: application_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"account_password\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Account_Password entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(2, account);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String repository_password = entity.getRepository_password();
        if (repository_password != null) {
            stmt.bindString(4, repository_password);
        }
 
        String associated_mailbox = entity.getAssociated_mailbox();
        if (associated_mailbox != null) {
            stmt.bindString(5, associated_mailbox);
        }
        stmt.bindLong(6, entity.getAccount_type_id());
 
        String application_name = entity.getApplication_name();
        if (application_name != null) {
            stmt.bindString(7, application_name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Account_Password entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(2, account);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String repository_password = entity.getRepository_password();
        if (repository_password != null) {
            stmt.bindString(4, repository_password);
        }
 
        String associated_mailbox = entity.getAssociated_mailbox();
        if (associated_mailbox != null) {
            stmt.bindString(5, associated_mailbox);
        }
        stmt.bindLong(6, entity.getAccount_type_id());
 
        String application_name = entity.getApplication_name();
        if (application_name != null) {
            stmt.bindString(7, application_name);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Account_Password readEntity(Cursor cursor, int offset) {
        Account_Password entity = new Account_Password( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // account
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // password
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // repository_password
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // associated_mailbox
            cursor.getInt(offset + 5), // account_type_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // application_name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Account_Password entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRepository_password(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAssociated_mailbox(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAccount_type_id(cursor.getInt(offset + 5));
        entity.setApplication_name(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Account_Password entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Account_Password entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Account_Password entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
